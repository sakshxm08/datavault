{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { createUserWithEmailAndPassword, getAuth, GithubAuthProvider, GoogleAuthProvider, signInWithEmailAndPassword, signInWithPopup, signOut } from \"firebase/auth\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCe6DhMaEzwoyAlyen8I-95f_hoSKwRWYY\",\n  authDomain: \"datavault-85439.firebaseapp.com\",\n  projectId: \"datavault-85439\",\n  storageBucket: \"datavault-85439.appspot.com\",\n  messagingSenderId: \"115937284124\",\n  appId: \"1:115937284124:web:e2b44cbba7773e6286cfd9\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst createUser = (email, password) => {\n  createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in\n    const user = userCredential.user;\n    console.log(user);\n    // ...\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    console.log(errorCode, errorMessage);\n\n    // ..\n  });\n};\n\nconst signInWithEmail = (email, password) => {\n  signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in\n    const user = userCredential.user;\n    console.log(user);\n    // ...\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    console.log(errorCode, errorMessage);\n  });\n};\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = () => {\n  signInWithPopup(auth, googleProvider).then(result => {\n    // The signed-in user info.\n    const user = result.user;\n    console.log(user);\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    console.log(errorCode, errorMessage, email);\n    // ...\n  });\n};\n\nconst githubProvider = new GithubAuthProvider();\nconst signInWithGithub = () => {\n  signInWithPopup(auth, githubProvider).then(result => {\n    // The signed-in user info.\n    const user = result.user;\n    console.log(user);\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    console.log(errorCode, errorMessage, email);\n    // ...\n  });\n};\n\nconst logOut = () => {\n  signOut(auth);\n};\nexport { auth, createUser, signInWithEmail, signInWithGoogle, signInWithGithub, logOut };","map":{"version":3,"names":["initializeApp","createUserWithEmailAndPassword","getAuth","GithubAuthProvider","GoogleAuthProvider","signInWithEmailAndPassword","signInWithPopup","signOut","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","createUser","email","password","then","userCredential","user","console","log","catch","error","errorCode","code","errorMessage","message","signInWithEmail","googleProvider","signInWithGoogle","result","customData","githubProvider","signInWithGithub","logOut"],"sources":["/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project - 13 DataVault/datavault/src/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {\n  createUserWithEmailAndPassword,\n  getAuth,\n  GithubAuthProvider,\n  GoogleAuthProvider,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCe6DhMaEzwoyAlyen8I-95f_hoSKwRWYY\",\n  authDomain: \"datavault-85439.firebaseapp.com\",\n  projectId: \"datavault-85439\",\n  storageBucket: \"datavault-85439.appspot.com\",\n  messagingSenderId: \"115937284124\",\n  appId: \"1:115937284124:web:e2b44cbba7773e6286cfd9\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\n\nconst createUser = (email, password) => {\n  createUserWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n      // Signed in\n      const user = userCredential.user;\n      console.log(user);\n      // ...\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n\n      // ..\n    });\n};\n\nconst signInWithEmail = (email, password) => {\n  signInWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n      // Signed in\n      const user = userCredential.user;\n      console.log(user);\n      // ...\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n    });\n};\n\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = () => {\n  signInWithPopup(auth, googleProvider)\n    .then((result) => {\n      // The signed-in user info.\n      const user = result.user;\n      console.log(user);\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      console.log(errorCode, errorMessage, email);\n      // ...\n    });\n};\n\nconst githubProvider = new GithubAuthProvider();\nconst signInWithGithub = () => {\n  signInWithPopup(auth, githubProvider)\n    .then((result) => {\n      // The signed-in user info.\n      const user = result.user;\n      console.log(user);\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      console.log(errorCode, errorMessage, email);\n      // ...\n    });\n};\n\nconst logOut = () => {\n  signOut(auth);\n};\n\nexport {\n  auth,\n  createUser,\n  signInWithEmail,\n  signInWithGoogle,\n  signInWithGithub,\n  logOut,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}